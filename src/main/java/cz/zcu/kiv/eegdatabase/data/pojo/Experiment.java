package cz.zcu.kiv.eegdatabase.data.pojo;
// Generated 19.1.2010 23:18:53 by Hibernate Tools 3.2.1.GA

import cz.zcu.kiv.eegdatabase.data.annotation.Indexed;
import cz.zcu.kiv.eegdatabase.data.annotation.SolrField;
import cz.zcu.kiv.eegdatabase.data.annotation.SolrId;
import cz.zcu.kiv.eegdatabase.logic.indexing.IndexField;
import cz.zcu.kiv.eegdatabase.logic.util.SignalProcessingUtils;

import javax.persistence.*;
import java.io.Serializable;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;

/**
 * Experiment generated by hbm2java
 */
@Entity
@Indexed // Mark for indexing
//@Analyzer(impl = StandardAnalyzer.class)
@javax.persistence.Table(name="EXPERIMENT")
public class Experiment implements Serializable {

    @SolrId
    //@DocumentId //Mark id property shared by Core and Search
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "EXPERIMENT_ID")
    private int experimentId;
    @Indexed
    @ManyToOne
    @JoinColumn(name = "WEATHER_ID")
    private Weather weather;
    @ManyToOne
    @JoinColumn(name = "SUBJECT_PERSON_ID")
    private Person personBySubjectPersonId;
    @ManyToOne
    @JoinColumn(name = "SCENARIO_ID")
    private Scenario scenario;
    @ManyToOne
    @JoinColumn(name = "OWNER_ID")
    private Person personByOwnerId;
    @ManyToOne
    @JoinColumn(name = "RESEARCH_GROUP_ID")
    private ResearchGroup researchGroup;
    //@DateBridge(resolution = Resolution.DAY)//Precision stored in the index: day
    @Column(name = "START_TIME")
    private Timestamp startTime;
    //@DateBridge(resolution = Resolution.DAY)//Precision stored in the index: day
    @Column(name = "END_TIME_ID")
    private Timestamp endTime;
    @Column(name = "ORA_ROWSCN", insertable = false, updatable = false)
    private long scn;
    /*
    @Fields({
            @Field(index = Index.UN_TOKENIZED), // same property indexed multiple times
            @Field(store = Store.YES), // environmentNote value is stored in the index
            @Field(name = "temperature")})   // use a different field name
    */
    @SolrField(name = IndexField.TEMPERATURE)
    @Column(name = "TEMPERATURE")
    private int temperature;
    /*
    @Fields({
            @Field(index = Index.UN_TOKENIZED), // same property indexed multiple times
            @Field(store = Store.YES), // environmentNote value is stored in the index
            @Field(name = "environmentNote")})   // use a different field name
    */
    //@Boost(2)//Boost environmentNote field
    @SolrField(name = IndexField.TEXT)
    @Column(name = "ENVIRONMENT_NOTE")
    private String environmentNote;
    @ManyToMany(mappedBy = "experiments")
    private Set<Person> persons = new HashSet<Person>(0);
    @Indexed
    @ManyToMany(mappedBy = "experiments")
    private Set<Hardware> hardwares = new HashSet<Hardware>(0);
    @OneToMany(mappedBy = "experiment")
    private Set<DataFile> dataFiles = new HashSet<DataFile>(0);
    @OneToMany(mappedBy = "experiment")
    private Set<ExperimentOptParamVal> experimentOptParamVals = new HashSet<ExperimentOptParamVal>(0);
    @OneToMany(mappedBy = "experiment")
    private Set<History> histories = new HashSet<History>(0);
    @Indexed
    @ManyToMany(mappedBy = "experiments")
    private Set<Pharmaceutical> pharmaceuticals = new HashSet<Pharmaceutical>(0);
    @Indexed
    @ManyToMany(mappedBy = "experiments")
    private Set<Disease> diseases = new HashSet<Disease>(0);
    @ManyToMany(mappedBy = "experiments")
    private Set<ProjectType> projectTypes = new HashSet<ProjectType>(0);
    @Indexed
    @ManyToMany(mappedBy = "experiments")
    private Set<Software> softwares = new HashSet<Software>(0);
    @ManyToMany(mappedBy = "experiments")
    private Set<ArtifactRemoveMethod> artifactRemoveMethods = new HashSet<ArtifactRemoveMethod>(0);
    @ManyToOne
    @JoinColumn(name = "DIGITIZATION_ID")
    private Digitization digitization;
    @ManyToOne
    @JoinColumn(name = "SUBJECT_GROUP_ID")
    private SubjectGroup subjectGroup;
    @Column(name = "PRIVATE")
    private boolean privateExperiment;
    @ManyToOne
    @JoinColumn(name = "ARTEFACT_ID")
    private Artifact artifact;
    @ManyToOne
    @JoinColumn(name = "ELECTRODE_CONF_ID")
    private ElectrodeConf electrodeConf;

    @OneToMany(mappedBy="experiment")
    private Set<ExperimentPackageConnection> experimentPackageConnections = new HashSet<ExperimentPackageConnection>(0);

    public Experiment() {
    }

    public Experiment(int experimentId, Weather weather, Person personBySubjectPersonId, Scenario scenario, Person personByOwnerId, ResearchGroup researchGroup) {
        this.experimentId = experimentId;
        this.weather = weather;
        this.personBySubjectPersonId = personBySubjectPersonId;
        this.scenario = scenario;
        this.personByOwnerId = personByOwnerId;
        this.researchGroup = researchGroup;

    }

    public Experiment(int experimentId, Weather weather, Person personBySubjectPersonId, Scenario scenario, Person personByOwnerId, ResearchGroup researchGroup, Timestamp startTime, Timestamp endTime, int temperature, String environmentNote, Set<Person> persons, Set<Hardware> hardwares, Set<DataFile> dataFiles, Set<ExperimentOptParamVal> experimentOptParamVals) {
        this.experimentId = experimentId;
        this.weather = weather;
        this.personBySubjectPersonId = personBySubjectPersonId;
        this.scenario = scenario;
        this.personByOwnerId = personByOwnerId;
        this.researchGroup = researchGroup;
        this.startTime = startTime;
        this.endTime = endTime;
        this.temperature = temperature;
        this.environmentNote = environmentNote;
        this.persons = persons;
        this.hardwares = hardwares;
        this.dataFiles = dataFiles;
        this.experimentOptParamVals = experimentOptParamVals;
    }

    public int getExperimentId() {
        return this.experimentId;
    }

    public void setExperimentId(int experimentId) {
        this.experimentId = experimentId;
    }

    public Weather getWeather() {
        return this.weather;
    }

    public void setWeather(Weather weather) {
        this.weather = weather;
    }

    public Person getPersonBySubjectPersonId() {
        return this.personBySubjectPersonId;
    }

    public void setPersonBySubjectPersonId(Person personBySubjectPersonId) {
        this.personBySubjectPersonId = personBySubjectPersonId;
    }

    public Set<ExperimentPackageConnection> getExperimentPackageConnections() {
	    return experimentPackageConnections;
    }

    public void setExperimentPackageConnections(Set<ExperimentPackageConnection> experimentPackageConnections) {
	    this.experimentPackageConnections = experimentPackageConnections;
    }

    public Scenario getScenario() {
        return this.scenario;
    }

    public void setScenario(Scenario scenario) {
        this.scenario = scenario;
    }

    public Person getPersonByOwnerId() {
        return this.personByOwnerId;
    }

    public void setPersonByOwnerId(Person personByOwnerId) {
        this.personByOwnerId = personByOwnerId;
    }

    public ResearchGroup getResearchGroup() {
        return this.researchGroup;
    }

    public void setResearchGroup(ResearchGroup researchGroup) {
        this.researchGroup = researchGroup;
    }

    public Timestamp getStartTime() {
        return this.startTime;
    }

    public void setStartTime(Timestamp startTime) {
        this.startTime = startTime;
    }

    public Timestamp getEndTime() {
        return this.endTime;
    }

    public void setEndTime(Timestamp endTime) {
        this.endTime = endTime;
    }

    public int getTemperature() {
        return this.temperature;
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
    }
    // @Field(index=Index.TOKENIZED, store=Store.NO)

    public String getEnvironmentNote() {
        return this.environmentNote;
    }
//    @Field(name="environmentNote")
//    public Reader getIndexedWeathernote();

    public void setEnvironmentNote(String environmentNote) {
        this.environmentNote = environmentNote;
    }

    public Set<Person> getPersons() {
        return this.persons;
    }

    public void setPersons(Set<Person> persons) {
        this.persons = persons;
    }

    public Set<Hardware> getHardwares() {
        return this.hardwares;
    }

    public void setHardwares(Set<Hardware> hardwares) {
        this.hardwares = hardwares;
    }

    public Set<DataFile> getDataFiles() {
        return this.dataFiles;
    }

    public void setDataFiles(Set<DataFile> dataFiles) {
        this.dataFiles = dataFiles;
    }

    public Set<ExperimentOptParamVal> getExperimentOptParamVals() {
        return this.experimentOptParamVals;
    }

    public void setExperimentOptParamVals(Set<ExperimentOptParamVal> experimentOptParamVals) {
        this.experimentOptParamVals = experimentOptParamVals;
    }

    public boolean isPrivateExperiment() {
        return this.privateExperiment;
    }

    public void setPrivateExperiment(boolean privateExperiment) {
        this.privateExperiment = privateExperiment;
    }

    public Set<History> getHistories() {
        return histories;
    }

    public void setHistories(Set<History> histories) {
        this.histories = histories;
    }

    public boolean isSuitable() throws Exception {
        return (SignalProcessingUtils.getHeaders(this).size() > 0);
    }

    public Digitization getDigitization() {
        return digitization;
    }

    public void setDigitization(Digitization digitization) {
        this.digitization = digitization;
    }

    public SubjectGroup getSubjectGroup() {
        return subjectGroup;
    }

    public void setSubjectGroup(SubjectGroup subjectGroup) {
        this.subjectGroup = subjectGroup;
    }

    public Artifact getArtifact() {
        return artifact;
    }

    public void setArtifact(Artifact artifact) {
        this.artifact = artifact;
    }

    public ElectrodeConf getElectrodeConf() {
        return electrodeConf;
    }

    public void setElectrodeConf(ElectrodeConf electrodeConf) {
        this.electrodeConf = electrodeConf;
    }

    public Set<Pharmaceutical> getPharmaceuticals() {
        return pharmaceuticals;
    }

    public void setPharmaceuticals(Set<Pharmaceutical> pharmaceuticals) {
        this.pharmaceuticals = pharmaceuticals;
    }

    public Set<Disease> getDiseases() {
        return diseases;
    }

    public void setDiseases(Set<Disease> diseases) {
        this.diseases = diseases;
    }

    public Set<ProjectType> getProjectTypes() {
        return projectTypes;
    }

    public void setProjectTypes(Set<ProjectType> projectTypes) {
        this.projectTypes = projectTypes;
    }

    public Set<Software> getSoftwares() {
        return softwares;
    }

    public void setSoftwares(Set<Software> softwares) {
        this.softwares = softwares;
    }

    public Set<ArtifactRemoveMethod> getArtifactRemoveMethods() {
        return artifactRemoveMethods;
    }

    public void setArtifactRemoveMethods(Set<ArtifactRemoveMethod> artifactRemoveMethods) {
        this.artifactRemoveMethods = artifactRemoveMethods;
    }

    public long getScn() {
        return scn;
    }
}


