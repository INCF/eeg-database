<?xml version="1.0" encoding="UTF-8"?>
<!--
  This file is part of the EEG-database project
  
    ==========================================
   
    Copyright (C) 2013 by University of West Bohemia (http://www.zcu.cz/en/)
   
   ***********************************************************************************************************************
   
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at
   
        http://www.apache.org/licenses/LICENSE-2.0
   
    Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
   
   ***********************************************************************************************************************
   
		persistence.xml, 2013/10/02 00:01 Jakub Rinkes
-->
<beans xmlns="http://www.springframework.org/schema/beans"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:context="http://www.springframework.org/schema/context"
			 xmlns:aop="http://www.springframework.org/schema/aop"
			 xmlns:tx="http://www.springframework.org/schema/tx"
			 xmlns:util="http://www.springframework.org/schema/util"
			 xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
			 xmlns:hprof="http://www.nhprof.com/schema/hprof"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util-3.0.xsd
       http://www.nhprof.com/schema/hprof
       http://www.nhprof.com/schema/hprof/hprof.xsd
       http://www.springframework.org/schema/data/elasticsearch
       http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<context:annotation-config/>
	
	<elasticsearch:transport-client id="client" cluster-name="${elasticsearch.clusterName}" cluster-nodes="${elasticsearch.url}" />

	<bean name="elasticsearchTemplate" class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">
		<constructor-arg name="client" ref="client"/>
	</bean>
	
	<elasticsearch:repositories base-package="cz.zcu.kiv.eegdatabase.data.elasticsearch.repositories" />

	
	<!-- It is not sure whether this file will be used or not. -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/project.properties</value>
				<value>/WEB-INF/facebook.properties</value>
				<value>/WEB-INF/linkedin.properties</value>
			</list>
		</property>
	</bean>


	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject">
			<!-- System.getProperties() -->
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetClass" value="java.lang.System"/>
				<property name="targetMethod" value="getProperties"/>
			</bean>
		</property>
		<property name="targetMethod" value="putAll"/>
		<property name="arguments">
			<!-- The new Properties -->
			<util:properties>
				<prop key="javax.xml.parsers.DocumentBuilderFactory">${javax.xml.parsers.DocumentBuilderFactory}</prop>
				<prop key="javax.xml.transform.TransformerFactory">${javax.xml.transform.TransformerFactory}</prop>
			</util:properties>
		</property>
	</bean>

	<bean id="textEncryptor" class="org.springframework.security.crypto.encrypt.Encryptors" 
				factory-method="noOpText" />

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

	</bean>
	
	<bean id="myInterceptor" class="cz.zcu.kiv.eegdatabase.data.elasticsearch.entities.MyInterceptor"/>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
				
		<property name="entityInterceptor">
			<ref bean="myInterceptor"/>
		</property>
		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${db.dialect}</prop>
				<prop key="autocommmit">true</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
			</props>
		</property>
		<property name="packagesToScan" value="cz.zcu.kiv.eegdatabase.data.pojo"/>
		<hprof:profiler/>
	</bean>

	<bean name="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/WEB-INF/classes/messages</value>
				<value>/WEB-INF/classes/errors</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="fallbackToSystemLocale" value="false"/>
		<property name="cacheSeconds" value="90"/>
	</bean>

	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="txManager"/>
	</bean>

	<bean id="captchaEngine"
				class="com.octo.captcha.engine.image.gimpy.SimpleListImageCaptchaEngine"/>
          
	<bean id="captchaService"
				class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
		<constructor-arg index="0">
			<ref bean="imageEngine"/>
		</constructor-arg>
		<constructor-arg index="1">
			<value>180</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>180000</value>
		</constructor-arg>
		<constructor-arg type="int" index="3" value="75000"/>
	</bean>


	<bean id="imageEngine"
				class="com.octo.captcha.engine.GenericCaptchaEngine">
		<constructor-arg index="0">
			<list>
				<ref bean="CaptchaFactory"/>
			</list>
		</constructor-arg>
	</bean>
	<bean id="CaptchaFactory"
				class="com.octo.captcha.image.gimpy.GimpyFactory">
		<constructor-arg>
			<ref bean="wordgen"/>
		</constructor-arg>
		<constructor-arg>
			<ref bean="wordtoimage"/>
		</constructor-arg>
	</bean>

	<bean id="wordgen"
				class="com.octo.captcha.component.word.wordgenerator.DictionaryWordGenerator">
		<constructor-arg>
			<ref bean="filedict"/>
		</constructor-arg>
	</bean>

	<bean id="filedict"
				class="com.octo.captcha.component.word.FileDictionary">
		<constructor-arg index="0">
			<value>toddlist</value>
		</constructor-arg>
	</bean>

	<bean id="wordtoimage"
				class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<constructor-arg index="0">
			<ref bean="fontGenRandom"/>
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="backGenUni"/>
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="simpleWhitePaster"/>
		</constructor-arg>
	</bean>

	<bean id="fontGenRandom"
				class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
		<constructor-arg index="0">
			<value>40</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>50</value>
		</constructor-arg>
		<constructor-arg index="2">
			<list>
				<ref bean="fontArial"/>
			</list>
		</constructor-arg>
	</bean>

	<bean id="fontArial" class="java.awt.Font">
		<constructor-arg index="0">
			<value>Arial</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>0</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>10</value>
		</constructor-arg>
	</bean>

	<bean id="backGenUni"
				class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator">
		<constructor-arg index="0">
			<value>300</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>100</value>
		</constructor-arg>
	</bean>

	<bean id="simpleWhitePaster"
				class="com.octo.captcha.component.image.textpaster.SimpleTextPaster">
		<constructor-arg type="java.lang.Integer" index="0">
			<value>3</value>
		</constructor-arg>
		<constructor-arg type="java.lang.Integer" index="1">
			<value>5</value>
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="2">
			<ref bean="colorGreen"/>
		</constructor-arg>
	</bean>

	<bean id="colorGreen" class="java.awt.Color">
		<constructor-arg type="int" index="0">
			<value>117</value>
		</constructor-arg>
		<constructor-arg type="int" index="1">
			<value>196</value>
		</constructor-arg>
		<constructor-arg type="int" index="2">
			<value>210</value>
		</constructor-arg>
	</bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
    
	<tx:annotation-driven transaction-manager="txManager"/>


	<aop:config>
		<!-- vse ve vrstve service obalit transakcemi -->
		<aop:pointcut id="serviceMethods" expression="execution(* cz.zcu.kiv.eegdatabase.data.service.*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
	</aop:config>

</beans>
